##! マウスの使用を許可・不許可
set -g mouse on

##! 色のデフォルト値は002(緑)
set -g status-bg colour002

##! display-messageの表示時間(ms)
set -g display-time 250


##! 色設定ファイルを外出し、ホスト名に応じて色を上書きする
run-shell "bash ~/.var/dots/bin/set-tmux-colour.sh"

##! デフォルトのシェル
set -g default-shell "/bin/zsh"

##! use vi like mode
setw -g mode-keys vi

# 証跡を取るコマンド
# bind -T root -n C-p pipe-pane -o 'cat >> ~/output.#I-#P' \; display "pipe output"

##! set prefix
set -g prefix C-x
set -sg escape-time 10

##! terminalのタイトルを変更
set -g set-titles on
set -g set-titles-string "#S @ #H"

##! ステータスを表示
set -g status 2
set -s status-interval 1
set -g status-position top

##! ステータスの左側の設定
set -g status-left-length 25


if-shell '[ `uname` = "Darwin" ]' {
  set -g status-left '#[fg=white,bold,bg=#6D6D6B]  #[default]#[fg=#000000,bold]#S#[default]|'
}
if-shell '[ `uname` = "Linux" ]' {
  set -g status-left '#[fg=white,bold,bg=#6D6D6B]  #[default]#[fg=#000000,bold]#S#[default]|'
}


##! ステータスの右側の情報
# set -g status-right '#{host} #(tmux run-shell "tmux_hook --default true --git-path #{pane_current_path}")'
# get-tmux-mouse-status.shはマウスの状態を色付きで返すスクリプト
# get-osx-battery.shはバッテリーの状態を取得するスクリプト
set -g status-right-length 55
if-shell '[ `uname` = "Darwin" ]' {
  set -g status-right '#[fg=white,bold,bg=#6D6D6B]#(date "+%F %H:%M")#[default] #(sh ~/.var/dots/bin/get-tmux-mouse-status.sh) #{host} #(sh ~/.var/dots/bin/get-osx-battery.sh) ' 
}
if-shell '[ `uname` = "Linux" ]' {
  set -g status-right '#(sh ~/.var/dots/bin/get-tmux-mouse-status.sh) #{host} #[fg=white,bold,bg=#6D6D6B]#(date "+%F %H:%M:%S")#[default]'
}

##! 二番目のステータスの表示
TMUX_MY_VAR="a"
set -g status-format[1] '#[fg=white,bold,bg=#6D6D6B]#(arch)#[default]|#[fg=white,bg=#6D6D6B] #{version} #[default]|#[fg=white,bg=#6D6D6B] #{pane_tty} #[default]| #[fg=black,bold]#{s|#(echo $HOME)|~|:pane_current_path}#[default] | #(python3 -S ~/.var/dots/bin/get-date-remained.py) | #(sh ~/.var/dots/bin/get-tmux-window-data.sh)'

##! ウィンドウのスタイル
set -g window-style 'fg=colour249,bg=colour236'
set -g window-active-style 'fg=colour250,bg=black'
set -g window-status-format '#I:#W#F'
# 今、選択されているwindowのフォーマット
set -g window-status-current-style 'fg=#000000,bold,italics,underscore'
# windowのリナンバリングをon
set -g renumber-windows on
# 自動リネームを有効化
set -g automatic-rename on
# TODO
set -g automatic-rename-format '#{pane_current_command}'

##! paneのスタイル
setw -g pane-base-index 1
set -g pane-active-border-style bg=black,fg=cyan
set -g pane-border-style bg=black,fg=grey
# setw -g pane-border-status bottom
setw -g pane-border-status off
setw -g pane-border-format '#{pane_current_command} | #{pane_tty} | #{pane_current_path}'
set -g history-limit 10000

##! キーバインディング
bind -T prefix -n 1 set -g status-position top
bind -T prefix -n 2 set -g status-position bottom
bind -T prefix -n 3 setw -g pane-border-status off
bind -T prefix -n 4 setw -g pane-border-status bottom
bind -T prefix -n 5 attach-session -t . -c '#{pane_current_path}' \; display 'attach-session #{pane_current_path}'
bind -T prefix -n c attach-session -t . -c '#{pane_current_path}' \; new-window \; display "create new window"

##! shift arrow to switch windows
bind -T root -n S-Left {
  # 前のwindowに移動
  previous-window
}
bind -T root -n S-Right {
  # 次のwindowに移動
  next-window
}
bind -T root -n S-Up {
  # 左のwindowとスワップする
  swap-window -d -t :-1
}
bind -T root -n S-Down {
  # 右のwindowとスワップする
  swap-window -d -t :+1
}


# ネストしたtmuxに対応するため、C-bをunbind
unbind C-b
unbind C-p
unbind C-n
# try to remove shift + `
unbind M-`

##! マウスの有効無効を切り替える
bind -T prefix -n 3 run-shell "bash ~/.var/dots/bin/toggle-tmux-mouse.sh"
bind -T prefix -n m { 
  # 内部的に切り替わっているがステータスバーの更新に少し時間がかかる
  run-shell "bash ~/.var/dots/bin/toggle-tmux-mouse.sh"
  # refresh-client -Sはstatusの更新を行わない
  # refresh-client -S
}

##! マウスの右クリック動作　動作設定
#bind -T root -n MouseDown3Pane {
#  display "BindLeft"
#}

##! Shift+マウスの左クリック時の動作
bind -T root -n S-MouseDown1Pane {
  display-menu -T "Shift+MouseDown1Pane" \
	"run matrix" 1 {
	  display-popup "cmatrix"
	  display-message "run cmatrix"
	} \
	"run bash" 2 {
	  display-popup "bash"
	} \
	"extend display-time" 3 {
	  set -g display-time 4000
	} \
	"test command" 4 {
	  run-shell -t "echo 1"
	} \
	"run cacafire" 5 {
	  display-popup "cacafire"
	  display-message "run cacafire"
	}
}

##! statusの空白部分の左クリック時の動作
bind -T root -n MouseDown1StatusDefault {
  display-popup "echo status bar clicked!"  
}


##! true colorサポート
# 256 color(from ver 2.1)
# set -g default-terminal "xterm-256color"
# これは有効にしていないと24 bit color(true color)にならない
# 24 bit color(from ver 3.0)
set -sa terminal-overrides ",xterm*:Tc"
set -gw xterm-keys on


##! 設定ファイルの再読み込み
bind -T prefix r {
  display-popup -E "\
	cd ~/.var/dots/; \
	git pull; \
	echo 'dots repository was updated!'; \
	git pull; \
	git submodule update --recursive --remote; \
	echo 'all git repository updated!'; \
	tmux source-file ~/.tmux.conf; \
	echo '~/.tmux.conf was reloaded!'; \
	echo '終了して大丈夫です<C-c>'; \
	sleep 1; \
  "
}

##! Option + r(®)で設定ファイルの再読み込み + status barの非表示 + 表示
bind -T root ® {
  set status off
  set status 2
  source-file "~/.tmux.conf"
  display-message "設定ファイルを再読み込みしました"
}

##! test
bind -T root -n M-r {
  display-popup "\
	bash
  "
}

bind -T root -n M-m {
  display-menu -T "small menus" \
	"run matrix" 1 {
	  display-popup -xC -yC -w80% -h30% -E "cmatrix"
	  display-message "run cmatrix"
	} \
	"run cacafire" 5 {
	  display-popup "cacafire"
	  display-message "run cacafire"
	}
}


##! ツリーを選択する
bind -T root -n C-t { 
  choose-tree -Zs
  display "choose tree."
  resize-window -A
}

##! アグレッシブにリサイズする
set-window-option -g aggressive-resize

##! resize-window
bind -T root -n C-w { 
  resize-window -A
  refresh-client -S
  set -g status off
  set -g status 2
  display "resize and refresh window.(画面をリサイズしてクライアントをリフレッシュしました)"
}
##! resize-window
bind -T root -n C-S-r { 
  resize-window -A
  refresh-client -S 
  display "resize and refresh window.(画面をリサイズしてクライアントをリフレッシュしました)"
}

##! split window to pane
bind -T prefix -n | split-window -h
bind -T prefix -n - split-window -v
bind -T prefix -n v split-window -h
bind -T prefix -n h split-window -v

##! select pane
bind -T root -n C-S-Left select-pane -L \; display "move to left."
bind -T root -n C-S-Down select-pane -D \; display "movo to down."
bind -T root -n C-S-Up select-pane -U \; display "movo to up."
bind -T root -n C-S-Right select-pane -R \; display "movo to right."
bind -T root -n ¬ select-pane -L \; display "move to left." # option + l
bind -T root -n ˚ select-pane -U \; display "movo to up."
bind -T root -n ∆ select-pane -D \; display "movo to down."
bind -T root -n ˙ select-pane -R \; display "movo to right."

##! resize window and pane
bind -r -T prefix -n Down resize-pane -D 1 \; display "resize-pane. -D"
bind -r -T prefix -n Up resize-pane -U 1 \; display "resize-pane. -U"
bind -r -T prefix -n Left resize-pane -L 1 \; display "resize-pane. -L"
bind -r -T prefix -n Right resize-pane -R 1 \; display "resize-pane. -R"


##! copy-paste mode
## copyモードに入る
bind-key -T prefix -n v copy-mode
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi y send-keys -X copy-selection \; display "yank(copy)"
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
## pasteする
bind-key -T prefix -n p paste-buffer
## bufferを見る
bind-key -T prefix -n l list-buffers
